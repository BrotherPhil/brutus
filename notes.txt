
Caesure: a python bitcoin client

--------------------------------------------------------------------------------
Help Fund This Project! 1Ncui8YjT7JJD91tkf42dijPnqywbupf7w
--------------------------------------------------------------------------------

note: this is *not* a JSON/RPC client, it's an implementation of the bitcoin protocol.

requirements: a relatively recent python, probably 2.5+ or so
either: A) an openssl library.
        B) the pure-python ecdsa package.

I have tested this code using openssl on osx 10.6 (64-bit), linux ubuntu (32-bit), and freebsd-7 (64-bit).

status:

It can connect to a server - preferably on the same host - and download the latest blocks.  stores
the block chain in a simple flat file.  The wallet can store private keys, and can monitor the block
chain for transactions related to those keys.  You can also scan the entire block database (or a
portion of it) for related transactions.

todo:

There's still a lot of work to be done before I would consider it safe to connect
this to the wider bitcoin p2p network.  In the meanwhile, 

name:

It's a pun on the words Caesar and Seizure.  "Render unto Caesar..."

usage:
--------------------------------------------------------------------------------

$ python bitcoin.py -c <your-external-ip-address> <other-ip-address>

I recommend connecting to a bitcoin client on your local machine, i.e., 127.0.0.1.

Once the client connects to the server it will start to download the block
database.  This will take a while, even if you're talking to localhost.

You can monitor the progress like this:

from another terminal:
$ telnet localhost 8023

you'll get a python prompt:

>>> the_block_db
<__main__.block_db instance at 0x43bdc8>
>>> db = _
>>> len(db.blocks)
10123
>>> 
>>> len(db.blocks)
18539
>>> 
>>> len(db.blocks)
66029
>>> 
[...]

IMPORTANT NOTE:  If you're running this on a multi-user machine, the python prompt
sitting on port 8023 will be a bad idea.  You have two choices: remove the line that
starts that server (near the bottom of the file, "m = monitor.monitor_server()"),
*or*, if your operating system supports it, bind the socket to an AF_UNIX socket and
telnet to that file.

The monitor interface is there to speed up development, and will eventually be
removed completely - probably replaced by a web admin interface.

--------------------------------------------------------------------------------

web admin.

In client mode ('-c'), a web admin server is also started up on localhost:
try http://localhost:8380/admin/ (note: that trailing slash is important)

--------------------------------------------------------------------------------

testnet.

To use testnet, give the '-t' argument along with '-c'.  This will change several
global values, and should NOT impact your block database - it uses different
filenames.  HOWEVER you should use a different wallet path (the '-w' argument).

--------------------------------------------------------------------------------

Wallet:

To have access to a wallet, use: [-w <wallet-path>]

$ python bitcoin.py -w wallet.bin
NOTE: NOT COMPATIBLE WITH THE OFFICIAL CLIENT WALLET.DAT

--------------------------------------------------------------------------------

Rather than running a client, you can just start up python and play with the block
database.  Both the block database and wallet files are written in append-only mode,
so it's safe to open them read-only from another process, even while the client is
running.

$ python -i bitcoin.py -w wallet.bin 
reading block headers...
last block (135225): 0000000000000478bd4859949e91b44cc28e6a02e7bb2985df250751063e1d1f
>>> db['0000000000000478bd4859949e91b44cc28e6a02e7bb2985df250751063e1d1f']
<__main__.BLOCK instance at 0x3e7d508>
>>> b = _
>>> b.transactions[1]
<__main__.TX instance at 0x1e9508>
>>> tx = _
>>> tx
<__main__.TX instance at 0x1e9508>

dump a transaction:
>>> tx.dump()
hash: b1f8edbda61061be661731d3de215299f1356736502e52a0772a9259f7fd699d
inputs: 1
  0 13f23ebb1643b6faa02cf93f0bfd5c97c22bd76f3e9464ec61601d84f3afd404:0 493046022100b64136b383721bede39c6ff855339920928006c43d5f536d45c14ab401b736f8022100ee564e42001e3b071545e5f55bbcaa87eca7d731a339177701c40fa6d61510bf014104b3cd4b6d65ffea8fb7781e88a4e67d2f8104b80fb45ee50981940001d3a132584ea10a34a03224823492fd25344c50e40a52069df297da024ffb3175ec745021 4294967295
2 outputs
  0 30.00000000 142rU1TWaxZkrTbxvvLGY8VyKiEyYPtKZu
  1 10.00000000 1Q9vpsULCLxS7dLXGg9kcfG31DTTqnhoxy
lock_time: 0
>>>

fetch a block by number:
>>> db.num_block[135000]
'00000000000001bf349e3e8195f95a080ea17efe012cf7f512664829f9d3772d'
>>> b = db[_]

dump all its transactions:
>>> for tx in b.transactions:
...     tx.dump()
... 

--- verify a transaction ---

verify the first input of a transaction:
>>> tx.verify (0)
1

--- generate a new key/address ---

NOTE: if you send money to an address that you generate, be very careful
to preserve your wallet file!

>>> the_wallet.new_key()
'1AATJKbiuxUA6XJSJWSe6DVQx26ARdF1ex'

>>> the_wallet['1AATJKbiuxUA6XJSJWSe6DVQx26ARdF1ex']
<__main__.KEY instance at 0x1e9f08>


*** ALPHA CODE.  This has been used for only a handful of transactions.
*** USE AT YOUR OWN RISK.  Don't send money you're not willing to lose!

--- receiving bitcoins ---
Just leave the client running.  Once the send shows up in a block, it will be seen
by the wallet and any associated outputs will be reflected in your wallet.

--- sending bitcoins ---
[this needs to be done via the back door so you have access to the client connection]
>>> the_wallet
<__main__.wallet instance at 0x43b9e0>
>>> w = _
>>> w.total_btc
6000000

This will create a TX object
>>> w.build_send_request (6000000, '16LQbU1mTAHGgPkYWzqisF3ntxv91TdV3j') 
input 5000000
input 1000000
<__main__.TX instance at 0x3e838f0>
>>> tx = _
>>> tx.dump()
hash: eaca9674e313d2e369baecf610648f64f5bb4a6ba164be3387c7af9df48112b7
inputs: 2
  0 350784530...0dc18a6:1 49304502206f60...a745a51e4 4294967295
  1 12e0b9d6c...1cd4dca:1 4930440220236a...3b1ef50f3 4294967295
1 outputs
  0 0.06000000 16LQbU1mTAHGgPkYWzqisF3ntxv91TdV3j
lock_time: 0

You should verify the inputs before sending on...
>>> tx.verify (0)
1
>>> tx.verify (1)
1

>>> packet = make_packet ('tx', tx.render())

This will actually send the packet.
>>> bc
<__main__.connection connected '127.0.0.1' at 0x458af8>
>>> bc.push (packet)

Any change that's sent back to you will be acknowledged once it makes it into
a block.

--------------------------------------------------------------------------------

   The Mysterious OP_CHECKSIG.

This is the most complex recipe for feeding a hash in the system.
It involves making a copy of the original TX, and modifying some of
the entries.

Hugely Helpful: http://forum.bitcoin.org/index.php?topic=2957.20
original tx:
010000000330f3701f9bc464552f70495791040817ce777ad5ede16e529fcd0c0e94915694000000008c493046022100f5746b0b254f5a37e75251459c7a23b6dfcb868ac7467edd9a6fdd1d969871be02210088948aea29b69161ca341c49c02686a81d8cbb73940f917fa0ed7154686d3e5b01410447d490561f396c8a9efc14486bc198884ba18379bcac2e0be2d8525134ab742f301a9aca36606e5d29aa238a9e2993003150423df6924563642d4afe9bf4fe28ffffffff72142bf7686ce92c6de5b73365bfb9d59bb60c2c80982d5958c1e6a3b08ea689000000004a493046022100bce43ad3acbc79b0247e54c8c91eac1cf9037505000e01d1fd811854d85bc21a022100992a6f6f2feb6f62d3706f3b9aaab88d9f1132956a1dffa926cd556ed55360df01ffffffffd28128bbb6207c1c3d0a630cc619dc7e7bea56ac19a1dab127c62c78fa1b632c00000000494830450220209757368161537708fd29d89bb1e9d648007949ecfded789b51a96324cb6518022100cd0f7c30213916482b6e166d8a4f2b981f777eb184cd8a495f1b3d3690fbbf2d01ffffffff0100a6f75f020000001976a9149e35d93c7792bdcaad5697ddebf04353d9a5e19688ac00000000

original tx:
version   01000000
#inputs   03
---
outpoint  30f3701f9bc464552f70495791040817ce777ad5ede16e529fcd0c0e94915694
index     00000000
script    8c 493046022100f5746b0b254f5a37e75251459c7a23b6dfcb868ac7467edd9a6fdd1d969871be02210088948aea29b69161ca341c49c02686a81d8cbb73940f917fa0ed7154686d3e5b01410447d490561f396c8a9efc14486bc198884ba18379bcac2e0be2d8525134ab742f301a9aca36606e5d29aa238a9e2993003150423df6924563642d4afe9bf4fe28
sequence  ffffffff
---
outpoint  72142bf7686ce92c6de5b73365bfb9d59bb60c2c80982d5958c1e6a3b08ea689
index     00000000
script    4a 493046022100bce43ad3acbc79b0247e54c8c91eac1cf9037505000e01d1fd811854d85bc21a022100992a6f6f2feb6f62d3706f3b9aaab88d9f1132956a1dffa926cd556ed55360df01
sequence  ffffffff
---
outpoint  d28128bbb6207c1c3d0a630cc619dc7e7bea56ac19a1dab127c62c78fa1b632c
index     00000000
script    49 4830450220209757368161537708fd29d89bb1e9d648007949ecfded789b51a96324cb6518022100cd0f7c30213916482b6e166d8a4f2b981f777eb184cd8a495f1b3d3690fbbf2d01
sequence  ffffffff
---
#outputs  01
value     00a6f75f02000000
script    19 76a9149e35d93c7792bdcaad5697ddebf04353d9a5e19688ac
---
locktime  00000000

final version to be hashed
--------------------------------------------------------------------------------
version   01000000
#inputs   03
---
outpoint  30f3701f9bc464552f70495791040817ce777ad5ede16e529fcd0c0e94915694
index     00000000
script    19 76a91402bf4b2889c6ada8190c252e70bde1a1909f961788ac
sequence  ffffffff
---
outpoint  72142bf7686ce92c6de5b73365bfb9d59bb60c2c80982d5958c1e6a3b08ea689
index     00000000
script    00
sequence  ffffffff
---
outpoint  d28128bbb6207c1c3d0a630cc619dc7e7bea56ac19a1dab127c62c78fa1b632c
index     00000000
script    00
sequence  ffffffff
---
#outputs  01
value     00a6f75f02000000
script    19 76a9149e35d93c7792bdcaad5697ddebf04353d9a5e19688ac
---
locktime  00000000
---
hash-type 01000000

Laid out so neatly the answer is fairly obvious...

The scripts are zeroed out for the non-relevant inputs (and this is done
by leaving *in* the zero length byte).

The relevant input's script - which originally was (<sig>, <pubkey>)
is replaced with an oscript-style hash of <pubkey>: i.e.
 [OP_DUP, OP_HASH160, <pubkey>, OP_EQUALVERIFY, OP_CHECKSIG]
This is probably where all the script-hacking magic comes in - take
the original oscript and replace the original output keyhash with the
input keyhash instead.  To handle non-standard txs we'll have to
figure that stuff out.

Finally, the 32-bit hash-type is appended.
Then, dhash() is done. (i.e., double-sha256)
